/*
 * Copyright (C) 2019, Scott Dial, All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

subprojects {
  apply plugin: 'java'
  apply plugin: 'maven-publish'

  // Restore status after Java plugin
  status = rootProject.status

  /* Specify that all of our sources are UTF-8 encoded, otherwise the
   * encoding is assumed based on the environment which can vary.
   */
  tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:all" << "-Werror"
  }

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  /* Create a "test" configuration and artifact for every project to
   * allow sharing of test code between subprojects via dependencies:
   *
   * dependencies {
   *   testCompile project(path: ':a-project', configuration: 'test')
   * }
   */
  configurations.create('test').extendsFrom(configurations.testCompile)
  task testJar(type: Jar) {
    classifier = 'test'
    from sourceSets.test.output
  }
  artifacts {
    test testJar
  }

  ext {
    titleForDocumentation = group + ':' + project.name + ':' + version
  }
  javadoc {
    options.showAll()
    options.encoding('UTF-8')
    options.charSet('UTF-8')
    options.setUse(true)
    options.author(true)
    options.version(true)
    options.windowTitle(titleForDocumentation)
    options.docTitle(titleForDocumentation)
    options.footer(copyrightString)
    doFirst {
      javadoc.title = titleForDocumentation
      javadoc.options.docTitle = javadoc.title
    }
  }

  if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
      // disable the crazy super-strict doclint tool in Java 8
      //noinspection SpellCheckingInspection
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }

  publish {
    dependsOn sourcesJar, javadocJar
  }
}

allprojects {
  apply plugin: 'ca.cutterslade.analyze'
  apply plugin: 'eclipse'
  apply plugin: 'java'
  apply plugin: 'maven-publish'

  // Instruct Eclipse projects to download both sources and javadoc
  eclipse {
    classpath {
      downloadSources = true
      downloadJavadoc = true
    }
  }

  // GRADLE-2087 workaround, perform after java plugin
  status = project.hasProperty('preferredStatus')?project.preferredStatus:(version.contains('SNAPSHOT')?'snapshot':'release')
}

jar.enabled = false

task distJars(type: Copy) {
  description 'Collect distribution files into a top-level dist directory.'
  dependsOn subprojects.collect { it.tasks.withType(Jar) }

  into file("${distDir}")
  allprojects {
    tasks.withType(Jar).each { t ->
      from t.outputs.files
    }
  }
}
dist.dependsOn distJars
