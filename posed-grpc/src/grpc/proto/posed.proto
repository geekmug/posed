/*
 * Copyright (C) 2019, Scott Dial, All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package posed;

option java_multiple_files = true;
option java_package = "posed.grpc.proto";
option java_outer_classname = "PosedProto";

service PoseService {
  rpc CreateRoot (CreateRootRequest) returns (CreateRootReply) {}
  rpc Create (CreateRequest) returns (CreateReply) {}
  rpc Delete (DeleteRequest) returns (DeleteReply) {}
  rpc Subgraph (SubgraphRequest) returns (SubgraphReply) {}
  rpc Traverse (TraverseRequest) returns (TraverseReply) {}

  rpc Update (UpdateRequest) returns (UpdateReply) {}

  rpc ConvertGeodeticToLocal (ConvertGeodeticRequest) returns (ConvertLocalReply) {}
  rpc ConvertGeodeticToLocalStream (ConvertGeodeticRequest) returns (stream ConvertLocalReply) {}
  rpc ConvertLocalToGeodetic (ConvertLocalRequest) returns (ConvertGeodeticReply) {}
  rpc ConvertLocalToGeodeticStream (ConvertLocalRequest) returns (stream ConvertGeodeticReply) {}

  rpc Transform (TransformRequest) returns (TransformReply) {}
  rpc TransformStream (TransformRequest) returns (stream TransformReply) {}
}

message Position {
  double x = 1;
  double y = 2;
  double z = 3;
}

message GeodeticPositionRequest {
  double latitude = 1;
  double longitude = 2;
  oneof altitude {
    double amsl = 3;
    double hae = 4;
  }
}

message GeodeticPositionReply {
  double latitude = 1;
  double longitude = 2;
  double amsl = 3;
  double hae = 4;
}

message NauticalAngles {
  double roll = 1;
  double pitch = 2;
  double yaw = 3;
}

message Quaternion {
  double w = 1;
  double x = 2;
  double y = 3;
  double z = 4;
}

message PoseRequest {
  Position position = 1;
  oneof rotation {
    NauticalAngles angles = 2;
    Quaternion quaternion = 3;
  }
}

message PoseReply {
  Position position = 1;
  NauticalAngles angles = 2;
  Quaternion quaternion = 3;
}

message GeodeticPoseRequest {
  GeodeticPositionRequest position = 1;
  oneof rotation {
    NauticalAngles angles = 2;
    Quaternion quaternion = 3;
  }
}

message GeodeticPoseReply {
  GeodeticPositionReply position = 1;
  NauticalAngles angles = 2;
  Quaternion quaternion = 3;
}

message Frame {
  string parent = 1;
  string frame = 2;
  PoseReply pose = 3;
}

message CreateRootRequest {
  string frame = 1;
}

message CreateRootReply {}

message CreateRequest {
  string parent = 1;
  string frame = 2;
  PoseRequest pose = 3;
}

message CreateReply {}

message DeleteRequest {
  string frame = 1;
  bool recursive = 2;
}

message DeleteReply {}

message SubgraphRequest {
  string frame = 1;
}

message SubgraphReply {
  repeated Frame frames = 1;
}

message TraverseRequest {
  string frame = 1;
}

message TraverseReply {
  repeated Frame frames = 1;
}

message UpdateRequest {
  string frame = 1;
  GeodeticPoseRequest pose = 2;
}

message UpdateReply {}

message ConvertGeodeticRequest {
  string frame = 1;
  GeodeticPoseRequest pose = 2;
}

message ConvertGeodeticReply {
  oneof value {
    GeodeticPoseReply pose = 1;
  }
}

message ConvertLocalRequest {
  string frame = 1;
  PoseRequest pose = 2;
}

message ConvertLocalReply {
  oneof value {
    PoseReply pose = 1;
  }
}

message TransformRequest {
  string srcFrame = 1;
  string dstFrame = 2;
  PoseRequest pose = 3;
}

message TransformReply {
  PoseReply pose = 3;
}
