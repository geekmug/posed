/*
 * Copyright (C) 2019, Scott Dial, All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    // Use
    maven {
      url "${artifactory_contextUrl}/plugins-release"
      credentials {
        username = "${artifactory_user}"
        password = "${artifactory_password}"
      }
    }
    // Use public repositories if the private artifactory is unavailable.
    gradlePluginPortal()
    jcenter()
  }

  dependencies {
    classpath group: 'ca.cutterslade.gradle', name: 'gradle-dependency-analyze', version: gradleDependencyAnalyzeVersion
    classpath group: 'de.aaschmid', name: 'gradle-cpd-plugin', version: gradleCpdPluginVersion
    classpath group: 'gradle.plugin.com.github.spotbugs', name: 'spotbugs-gradle-plugin', version: spotbugsGradlePluginVersion
    classpath group: 'gradle.plugin.nl.javadude.gradle.plugins', name: 'license-gradle-plugin', version: licenseGradlePluginVersion
    classpath group: 'net.ltgt.gradle', name: 'gradle-errorprone-plugin', version: errorpronePluginVersion
    classpath group: 'org.asciidoctor', name: 'asciidoctor-gradle-plugin', version: asciidoctorGradlePluginVersion
    classpath group: 'pl.allegro.tech.build', name: 'axion-release-plugin', version: axionReleasePluginVersion

    classpath group: 'com.google.guava', name: 'guava', version: guavaVersion
    classpath group: 'com.google.protobuf', name: 'protobuf-gradle-plugin', version: protobufGradlePluginVersion
    classpath group: 'io.spring.gradle', name: 'dependency-management-plugin', version: springDependencyManagementPluginVersion
    classpath group: 'org.jsonschema2pojo', name: 'jsonschema2pojo-gradle-plugin', version: js2pPluginVersion
  }
}

ext {
    // Make this extended task type available to all of the other gradle scripts
    SpotBugsTask = com.github.spotbugs.SpotBugsTask
}

apply from: file('gradle/base.gradle')

apply from: file('gradle/asciidoc.gradle')
apply from: file('gradle/check.gradle')
apply from: file('gradle/convention.gradle')
apply from: file('gradle/javadoc.gradle')
apply from: file('gradle/license.gradle')
apply from: file('gradle/publish.gradle')
apply from: file('gradle/repository.gradle')
apply from: file('gradle/scripts.gradle')

allprojects {
  apply plugin: 'io.spring.dependency-management'

  // Ensure that our transitive dependencies are sane.
  dependencyManagement {
    imports {
      mavenBom "org.glassfish.jaxb:jaxb-bom:${jaxbVersion}"
      mavenBom "org.hipparchus:hipparchus:${hipparchusVersion}"
      mavenBom "io.grpc:grpc-bom:${grpcVersion}"
      mavenBom "com.linecorp.armeria:armeria-bom:${armeriaVersion}"
      mavenBom "io.netty:netty-bom:${nettyVersion}"
      mavenBom "org.springframework:spring-framework-bom:${springVersion}"
      mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
    }

    dependencies {
      dependency group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: spotbugsVersion
      dependency group: 'com.google.code.findbugs', name: 'jsr305', version: jsr305Version
      dependency group: 'com.google.guava', name: 'guava', version: guavaVersion
      dependency group: 'com.google.protobuf', name: 'protoc', version: protocVersion
      dependency group: 'io.spring.javaformat', name: 'spring-javaformat-checkstyle', version: springJavaformatCheckstyleVersion
      dependency group: 'net.devh', name: 'grpc-server-spring-boot-autoconfigure', version: springBootGrpcVersion
      dependency group: 'net.devh', name: 'grpc-server-spring-boot-starter', version: springBootGrpcVersion
      dependency group: 'org.jvnet.ogc', name: 'kml-v_2_2_0', version: kmlVersion
      dependency group: 'org.orekit', name: 'orekit', version: orekitVersion
    }
  }

  if (configurations.findByName('spotbugs')) {
    // Spotbugs relies on a beta version of slf4j, so we need to override the BOM
    dependencyManagement {
      configurations(spotbugs) {
        imports {
          mavenBom "org.slf4j:slf4j-parent:${spotbugsSlf4jVersion}"
        }
      }
    }
  }

  if (configurations.findByName('checkstyle')) {
    dependencies {
      checkstyle group: 'io.spring.javaformat', name: 'spring-javaformat-checkstyle'
    }
  }
}

project(':posed-core') {
  dependencies {
    compile group: 'com.github.spotbugs', name: 'spotbugs-annotations'
    compile group: 'com.google.code.findbugs', name: 'jsr305'
    compile group: 'com.google.guava', name: 'guava'
    compile group: 'io.projectreactor', name: 'reactor-core'
    compile group: 'org.hipparchus', name: 'hipparchus-core'
    compile group: 'org.hipparchus', name: 'hipparchus-geometry'
    compile group: 'org.orekit', name: 'orekit'
    compile group: 'org.reactivestreams', name: 'reactive-streams'
    compile group: 'org.springframework', name: 'spring-beans'
    compile group: 'org.springframework', name: 'spring-context'

    testCompile group: 'io.projectreactor', name: 'reactor-test'
    testCompile group: 'junit', name: 'junit'
    testCompile group: 'org.hamcrest', name: 'hamcrest'
    testCompile group: 'org.reactivestreams', name: 'reactive-streams'
    testCompile group: 'org.springframework', name: 'spring-core'
    testCompile group: 'org.springframework', name: 'spring-beans'
    testCompile group: 'org.springframework', name: 'spring-test'
  }
}

project(':posed-grpc') {
  apply plugin: 'com.google.protobuf'

  def grpcGeneratedDir = "${buildDir}/grpc"

  sourceSets {
    grpc {
      java.srcDirs += "${buildDir}/grpc/grpc/grpc"
      java.srcDirs += "${buildDir}/grpc/grpc/java"
    }
    main {
      compileClasspath += grpc.compileClasspath + grpc.output
      runtimeClasspath += grpc.runtimeClasspath + grpc.output
    }
    test {
      compileClasspath += grpc.compileClasspath + grpc.output
      runtimeClasspath += grpc.runtimeClasspath + grpc.output
    }
  }
  jar {
    from sourceSets.grpc.output
  }
  javadoc.classpath += sourceSets.grpc.output
  sourcesJar.from {
    "${buildDir}/grpc/grpc/grpc"
    "${buildDir}/grpc/grpc/java"
  }
  configurations {
    permitGrpcUnusedDeclared
  }

  dependencies {
    grpcCompile group: 'com.google.guava', name: 'guava'
    grpcCompile group: 'com.google.protobuf', name: 'protobuf-java'
    grpcCompile group: 'io.grpc', name: 'grpc-api'
    grpcCompile group: 'io.grpc', name: 'grpc-protobuf'
    grpcCompile group: 'io.grpc', name: 'grpc-stub'

    compile project(':posed-core')
    compile group: 'com.github.spotbugs', name: 'spotbugs-annotations'
    compile group: 'com.google.guava', name: 'guava'
    compile group: 'com.linecorp.armeria', name: 'armeria-spring-boot-webflux-starter'
    compile group: 'com.linecorp.armeria', name: 'armeria-spring-boot-webflux-autoconfigure'
    compile group: 'com.linecorp.armeria', name: 'armeria-grpc'
    compile group: 'io.grpc', name: 'grpc-api'
    compile group: 'io.grpc', name: 'grpc-services'
    compile group: 'io.grpc', name: 'grpc-stub'
    compile group: 'io.projectreactor', name: 'reactor-core'
    compile group: 'org.hipparchus', name: 'hipparchus-core'
    compile group: 'org.hipparchus', name: 'hipparchus-geometry'
    compile group: 'org.orekit', name: 'orekit'
    compile group: 'org.springframework', name: 'spring-beans'
    compile group: 'org.springframework', name: 'spring-context'

    permitUnusedDeclared group: 'com.linecorp.armeria', name: 'armeria-spring-boot-webflux-starter'

    testCompile project(path: ':posed-core', configuration: 'test')
    testCompile group: 'junit', name: 'junit'
    testCompile group: 'org.hamcrest', name: 'hamcrest'
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testCompile group: 'org.springframework', name: 'spring-beans'
    testCompile group: 'org.springframework', name: 'spring-test'

    permitTestUnusedDeclared group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  }

  // Copy generated compile dependencies as runtime dependencies
  configurations.grpcCompile.getAllDependencies()
    .each({ dep -> dependencies { runtime dep } })

  // Add the additional sourceSets to the jacocoTestReport
  jacocoTestReport {
    additionalSourceDirs files(sourceSets.grpc.allJava.srcDirs)
    additionalClassDirs sourceSets.grpc.output
  }

  protobuf {
    generatedFilesBaseDir = "${buildDir}/grpc"
    clean {
      delete generatedFilesBaseDir
    }
    protoc {
      artifact = 'com.google.protobuf:protoc'
    }
    plugins {
      grpc {
        artifact = "io.grpc:protoc-gen-grpc-java"
      }
    }
    generateProtoTasks {
      all()*.plugins {
        grpc {}
      }
      all().each { task ->
        sourcesJar.dependsOn task
      }
    }
  }

  // Remove generated code from the cpdCheck
  rootProject.cpdCheck.source -= sourceSets.grpc.allJava

  checkstyleGrpc.enabled = false
  licenseGrpc.enabled = false
  pmdGrpc.enabled = false
  spotbugsGrpc.enabled = false
  compileGrpcJava.options.errorprone.enabled = false

  task analyzeGrpcDependencies(
      type: ca.cutterslade.gradle.analyze.AnalyzeDependenciesTask,
      dependsOn: grpcClasses) {
    classesDirs = sourceSets.grpc.output.classesDirs
    require = [project.configurations.grpcCompileClasspath]
    allowedToDeclare = [project.configurations.permitGrpcUnusedDeclared]
  }
  analyzeDependencies.dependsOn analyzeGrpcDependencies
}

project(':posed-service') {
  dependencies {
    compile project(':posed-core')
    compile project(':posed-grpc')
    compile project(':posed-web')
    compile group: 'com.github.spotbugs', name: 'spotbugs-annotations'
    compile group: 'com.google.guava', name: 'guava'
    compile group: 'com.linecorp.armeria', name: 'armeria-spring-boot-webflux-starter'
    compile group: 'org.hipparchus', name: 'hipparchus-core'
    compile group: 'org.hipparchus', name: 'hipparchus-geometry'
    compile group: 'org.hipparchus', name: 'hipparchus-geometry'
    compile group: 'org.orekit', name: 'orekit'
    compile group: 'org.slf4j', name: 'slf4j-api'
    compile group: 'org.springframework.boot', name: 'spring-boot'
    compile group: 'org.springframework.boot', name: 'spring-boot-autoconfigure'
    compile group: 'org.springframework', name: 'spring-beans'
    compile group: 'org.springframework', name: 'spring-context'
    compile group: 'org.yaml', name: 'snakeyaml'

    permitUnusedDeclared group: 'com.linecorp.armeria', name: 'armeria-spring-boot-webflux-starter'

    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'

    permitTestUnusedDeclared group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  }

  setStartScripts(project, [
    'posed': 'posed.service.Main',
  ], ['-XX:+UseConcMarkSweepGC', '-Xms64m', '-Xmx256m'])
}

project(':posed-czml') {
  apply plugin: 'jsonschema2pojo'

  jsonSchema2Pojo {
    classNamePrefix = 'Czml';
    generateBuilders = true;
    inclusionLevel = 'NON_EMPTY';
    removeOldOutput = true;
    source = files('src/main/json')
    targetPackage = 'posed.czml';
  }

  dependencies {
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations'
  }

  compileJava.options.errorprone.enabled = false
  licenseMain.enabled = false
  spotbugsMain.enabled = false
}

project(':posed-web') {
  def generatedResourcesDir = "${buildDir}/generated/resources"

  sourceSets {
    generated {
      resources.srcDir generatedResourcesDir
    }
  }
  jar {
    from sourceSets.generated.output
  }
  sourcesJar.from {
    sourceSets.generated.allSource
  }

  dependencies {
    compile project(':posed-core')
    compile project(':posed-czml')
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
    compile group: 'com.google.guava', name: 'guava'
    compile group: 'com.linecorp.armeria', name: 'armeria'
    compile group: 'com.linecorp.armeria', name: 'armeria-spring-boot-webflux-starter'
    compile group: 'com.sun.xml.bind', name: 'jaxb-impl'
    compile group: 'com.linecorp.armeria', name: 'armeria-spring-boot-webflux-autoconfigure'
    compile group: 'com.linecorp.armeria', name: 'armeria-spring-boot-webflux-starter'
    compile group: 'com.linecorp.armeria', name: 'armeria'
    compile group: 'io.projectreactor', name: 'reactor-core'
    compile group: 'org.hipparchus', name: 'hipparchus-core'
    compile group: 'org.hipparchus', name: 'hipparchus-geometry'
    compile group: 'org.jvnet.ogc', name: 'kml-v_2_2_0'
    compile group: 'org.orekit', name: 'orekit'
    compile group: 'org.springframework', name: 'spring-context'
    compile group: 'org.springframework', name: 'spring-core'
    compile group: 'org.springframework', name: 'spring-web'
    compile group: 'org.springframework', name: 'spring-beans'

    permitUnusedDeclared group: 'com.linecorp.armeria', name: 'armeria-spring-boot-webflux-starter'

    runtime group: 'org.glassfish.jaxb', name: 'jaxb-runtime'
  }

  licenseGenerated.exclude "/static/doc/index.html"

  licenseMain.exclude "/static/Cesium/**"
  licenseMain.exclude "/static/CesiumViewer/viewerCesiumNavigationMixin.js"

  task copyProtoFiles {
    project(':posed-grpc').sourceSets.grpc.proto.srcDirs.each {
      inputs.dir it
    }
    outputs.dir "${generatedResourcesDir}/static/proto"
    doLast {
      mkdir file("${generatedResourcesDir}/static/proto")
      copy {
        from project(':posed-grpc').sourceSets.grpc.proto.srcDirs
        into file("${generatedResourcesDir}/static/proto")
      }
    }
  }

  task copyAsciidocFiles(type: Copy, dependsOn: rootProject.asciidoctor) {
    into("${generatedResourcesDir}/static/doc")
    from("${rootProject.buildDir}/asciidoc/html5") {
      exclude '.asciidoctor'
    }
  }

  task generateResources(dependsOn: [copyProtoFiles, copyAsciidocFiles]) {}
  processGeneratedResources.dependsOn generateResources
  sourcesJar.dependsOn generateResources
}

distributions {
  main {
    contents {
      // Add our proto file to our distribution output
      from(project(':posed-grpc').sourceSets.grpc.proto.srcDirs) {
        into 'proto'
      }
    }
  }
}
