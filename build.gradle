/*
 * Copyright (C) 2019, Scott Dial, All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    gradlePluginPortal()
    mavenCentral()
    mavenLocal()
  }
  dependencyLocking {
    lockMode = LockMode.STRICT
    lockAllConfigurations()
  }
  dependencies {
    classpath group: 'ca.cutterslade.gradle', name: 'gradle-dependency-analyze', version: gradleDependencyAnalyzeVersion
    classpath group: 'com.adarshr', name: 'gradle-test-logger-plugin', version: gradleTestLoggerPluginVersion
    classpath group: 'com.benjaminsproule.license', name: 'com.benjaminsproule.license.gradle.plugin', version: licenseGradlePluginVersion
    classpath group: 'com.google.protobuf', name: 'protobuf-gradle-plugin', version: protobufGradlePluginVersion
    classpath group: 'io.spring.gradle', name: 'dependency-management-plugin', version: springDependencyManagementPluginVersion
    classpath group: 'net.ltgt.gradle', name: 'gradle-errorprone-plugin', version: errorpronePluginVersion
    classpath group: 'org.asciidoctor.jvm.convert', name: 'org.asciidoctor.jvm.convert.gradle.plugin', version: asciidoctorGradlePluginVersion
    classpath group: 'org.jsonschema2pojo', name: 'jsonschema2pojo-gradle-plugin', version: js2pPluginVersion
    classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: springBootVersion
    classpath group: 'pl.allegro.tech.build', name: 'axion-release-plugin', version: axionReleasePluginVersion
    classpath group: 'ru.vyarus', name: 'gradle-quality-plugin', version: gradleQualityPluginVersion
  }
}

apply from: file('gradle/base.gradle')

apply from: file('gradle/asciidoc.gradle')
apply from: file('gradle/java.gradle')
apply from: file('gradle/license.gradle')
apply from: file('gradle/publish.gradle')
apply from: file('gradle/repository.gradle')

allprojects {
  apply plugin: 'io.spring.dependency-management'

  // Ensure that our transitive dependencies are sane.
  dependencyManagement {
    imports {
      mavenBom "io.grpc:grpc-bom:${grpcVersion}"
      mavenBom "com.linecorp.armeria:armeria-bom:${armeriaVersion}"
      mavenBom "org.glassfish.jaxb:jaxb-bom:${jaxbVersion}"
      mavenBom "org.hipparchus:hipparchus:${hipparchusVersion}"
      mavenBom "org.springframework:spring-framework-bom:${springVersion}"
      mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
    }

    dependencies {
      dependency group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: spotbugsVersion
      dependency group: 'com.google.code.findbugs', name: 'jsr305', version: jsr305Version
      dependency group: 'com.google.guava', name: 'guava', version: guavaVersion
      dependency group: 'com.google.protobuf', name: 'protoc', version: protocVersion
      dependency group: 'io.spring.javaformat', name: 'spring-javaformat-checkstyle', version: springJavaformatCheckstyleVersion
      dependency group: 'org.jvnet.ogc', name: 'kml-v_2_2_0', version: kmlVersion
      dependency group: 'org.orekit', name: 'orekit', version: orekitVersion
    }
  }

  afterEvaluate {
    if (configurations.findByName('spotbugs')) {
      // Spotbugs relies on a newer version of slf4j, so we need to override the BOM
      dependencyManagement {
        configurations(spotbugs) {
          imports {
            mavenBom "org.slf4j:slf4j-parent:${spotbugsSlf4jVersion}"
          }
        }
      }
    }

    if (configurations.findByName('checkstyle')) {
      dependencies {
        checkstyle group: 'io.spring.javaformat', name: 'spring-javaformat-checkstyle'
      }
    }
  }
}

project(':posed-core') {
  dependencies {
    implementation group: 'com.github.spotbugs', name: 'spotbugs-annotations'
    implementation group: 'com.google.code.findbugs', name: 'jsr305'
    implementation group: 'com.google.guava', name: 'guava'
    implementation group: 'io.projectreactor', name: 'reactor-core'
    implementation group: 'org.hipparchus', name: 'hipparchus-core'
    implementation group: 'org.hipparchus', name: 'hipparchus-geometry'
    implementation group: 'org.orekit', name: 'orekit'
    implementation group: 'org.reactivestreams', name: 'reactive-streams'
    implementation group: 'org.springframework', name: 'spring-beans'
    implementation group: 'org.springframework', name: 'spring-context'

    permitUnusedDeclared group: 'com.github.spotbugs', name: 'spotbugs-annotations'

    testImplementation group: 'io.projectreactor', name: 'reactor-test'
    testImplementation group: 'junit', name: 'junit'
    testImplementation group: 'org.hamcrest', name: 'hamcrest'
    testImplementation group: 'org.reactivestreams', name: 'reactive-streams'
    testImplementation group: 'org.springframework', name: 'spring-core'
    testImplementation group: 'org.springframework', name: 'spring-beans'
    testImplementation group: 'org.springframework', name: 'spring-test'

    permitTestUnusedDeclared group: 'com.github.spotbugs', name: 'spotbugs-annotations'
  }
}

project(':posed-grpc') {
  dependencies {
    implementation project(':posed-core')
    implementation project(':posed-protos')
    implementation group: 'com.github.spotbugs', name: 'spotbugs-annotations'
    implementation group: 'com.google.guava', name: 'guava'
    implementation group: 'com.linecorp.armeria', name: 'armeria-spring-boot2-webflux-starter'
    implementation group: 'com.linecorp.armeria', name: 'armeria-spring-boot2-webflux-autoconfigure'
    implementation group: 'com.linecorp.armeria', name: 'armeria-grpc'
    implementation group: 'com.linecorp.armeria', name: 'armeria'
    implementation group: 'io.grpc', name: 'grpc-api'
    implementation group: 'io.grpc', name: 'grpc-services'
    implementation group: 'io.grpc', name: 'grpc-stub'
    implementation group: 'io.projectreactor', name: 'reactor-core'
    implementation group: 'org.hipparchus', name: 'hipparchus-core'
    implementation group: 'org.hipparchus', name: 'hipparchus-geometry'
    implementation group: 'org.orekit', name: 'orekit'
    implementation group: 'org.springframework', name: 'spring-beans'
    implementation group: 'org.springframework', name: 'spring-context'

    permitUnusedDeclared group: 'com.linecorp.armeria', name: 'armeria-spring-boot2-webflux-starter'

    testImplementation project(path: ':posed-core', configuration: 'test')
    testImplementation group: 'junit', name: 'junit'
    testImplementation group: 'org.hamcrest', name: 'hamcrest'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testImplementation group: 'org.springframework', name: 'spring-beans'
    testImplementation group: 'org.springframework', name: 'spring-test'

    permitTestUnusedDeclared group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  }
}

project(':posed-protos') {
  apply plugin: 'com.google.protobuf'

  dependencies {
    implementation group: 'com.google.guava', name: 'guava'
    implementation group: 'com.google.protobuf', name: 'protobuf-java'
    implementation group: 'io.grpc', name: 'grpc-api'
    implementation group: 'io.grpc', name: 'grpc-protobuf'
    implementation group: 'io.grpc', name: 'grpc-stub'
  }

  protobuf {
    generatedFilesBaseDir = "${buildDir}/grpc"
    clean {
      delete generatedFilesBaseDir
    }
    protoc {
      artifact = 'com.google.protobuf:protoc'
    }
    plugins {
      grpc {
        artifact = "io.grpc:protoc-gen-grpc-java"
      }
    }
    generateProtoTasks {
      all()*.plugins {
        grpc {}
      }
      all().each { task ->
        sourcesJar.dependsOn task
      }
    }
  }

  quality {
    checkstyle = false
    pmd = false
    spotbugs = false
  }

  licenseMain.enabled = false

  tasks.withType(JavaCompile) {
    options.errorprone.enabled = false
    options.compilerArgs.remove('-Xlint:all')
    options.compilerArgs.remove('-Werror')
    options.compilerArgs << '-Xlint:none' << '-Xlint:-unchecked'
  }
}

project(':posed-service') {
  dependencies {
    implementation project(':posed-core')
    implementation project(':posed-grpc')
    implementation project(':posed-web')
    implementation group: 'com.github.spotbugs', name: 'spotbugs-annotations'
    implementation group: 'com.google.guava', name: 'guava'
    implementation group: 'com.linecorp.armeria', name: 'armeria-spring-boot2-webflux-starter'
    implementation group: 'org.hipparchus', name: 'hipparchus-core'
    implementation group: 'org.hipparchus', name: 'hipparchus-geometry'
    implementation group: 'org.orekit', name: 'orekit'
    implementation group: 'org.slf4j', name: 'slf4j-api'
    implementation group: 'org.springframework.boot', name: 'spring-boot'
    implementation group: 'org.springframework.boot', name: 'spring-boot-autoconfigure'
    implementation group: 'org.springframework', name: 'spring-beans'
    implementation group: 'org.springframework', name: 'spring-context'
    implementation group: 'org.yaml', name: 'snakeyaml'

    permitUnusedDeclared group: 'com.linecorp.armeria', name: 'armeria-spring-boot2-webflux-starter'

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'

    permitTestUnusedDeclared group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  }
}

project(':posed-czml') {
  apply plugin: 'jsonschema2pojo'

  jsonSchema2Pojo {
    classNamePrefix = 'Czml';
    generateBuilders = true;
    inclusionLevel = 'NON_EMPTY';
    removeOldOutput = true;
    source = files('src/main/json')
    targetPackage = 'posed.czml';
  }

  dependencies {
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations'
  }

  quality {
    checkstyle = false
    pmd = false
    spotbugs = false
  }

  licenseMain.enabled = false

  tasks.withType(JavaCompile) {
    options.errorprone.enabled = false
    options.compilerArgs.remove('-Xlint:all')
    options.compilerArgs.remove('-Werror')
    options.compilerArgs << '-Xlint:none' << '-Xlint:-unchecked'
  }
}

project(':posed-web') {
  def generatedResourcesDir = "${buildDir}/generated/resources"

  sourceSets {
    generated {
      resources.srcDir generatedResourcesDir
    }
  }
  jar {
    from sourceSets.generated.output
  }
  sourcesJar.from {
    sourceSets.generated.allSource
  }

  dependencies {
    implementation project(':posed-core')
    implementation project(':posed-czml')
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
    implementation group: 'com.github.spotbugs', name: 'spotbugs-annotations'
    implementation group: 'com.google.guava', name: 'guava'
    implementation group: 'com.linecorp.armeria', name: 'armeria-spring-boot2-webflux-autoconfigure'
    implementation group: 'com.linecorp.armeria', name: 'armeria-spring-boot2-webflux-starter'
    implementation group: 'com.linecorp.armeria', name: 'armeria'
    implementation group: 'com.sun.xml.bind', name: 'jaxb-impl'
    implementation group: 'io.projectreactor', name: 'reactor-core'
    implementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api'
    implementation group: 'org.hipparchus', name: 'hipparchus-core'
    implementation group: 'org.hipparchus', name: 'hipparchus-geometry'
    implementation group: 'org.jvnet.ogc', name: 'kml-v_2_2_0'
    implementation group: 'org.orekit', name: 'orekit'
    implementation group: 'org.springframework', name: 'spring-context'
    implementation group: 'org.springframework', name: 'spring-core'
    implementation group: 'org.springframework', name: 'spring-web'
    implementation group: 'org.springframework', name: 'spring-beans'

    permitUnusedDeclared group: 'com.github.spotbugs', name: 'spotbugs-annotations'
    permitUnusedDeclared group: 'com.linecorp.armeria', name: 'armeria-spring-boot2-webflux-starter'

    runtimeOnly group: 'org.glassfish.jaxb', name: 'jaxb-runtime'
  }

  licenseGenerated.enabled = false

  licenseMain.exclude "/static/Cesium/**"
  licenseMain.exclude "/static/CesiumViewer/viewerCesiumNavigationMixin.js"

  task copyProtoFiles(dependsOn: [project(':posed-protos').extractProto]) {
    project(':posed-protos').sourceSets.main.proto.srcDirs.each {
      inputs.dir it
    }
    outputs.dir "${generatedResourcesDir}/static"
    doLast {
      mkdir file("${generatedResourcesDir}/static")
      copy {
        from project(':posed-protos').sourceSets.main.proto.srcDirs
        into file("${generatedResourcesDir}/static")
      }
    }
  }

  task copyAsciidocFiles(type: Copy, dependsOn: rootProject.asciidoctor) {
    into("${generatedResourcesDir}/static/doc")
    from("${rootProject.buildDir}/docs/asciidoc") {
      exclude '.asciidoctor'
    }
  }

  task generateResources(dependsOn: [copyProtoFiles, copyAsciidocFiles]) {}
  processGeneratedResources.dependsOn generateResources
  sourcesJar.dependsOn generateResources
}

apply plugin: 'application'
apply plugin: 'org.springframework.boot'
application {
  applicationName = 'posed'
  mainClass = 'posed.service.Main'
}
dependencies {
  runtimeOnly project(':posed-service')
}
bootJar {
  baseName = 'posed'
}
task runBootJar(type: JavaExec) {
  classpath = files(tasks.bootJar)
}
task distBootJar(type: Copy, dependsOn: bootJar) {
  into file("${distDir}")
  from bootJar.archiveFile
}
dist.dependsOn distBootJar
